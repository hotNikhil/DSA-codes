//statement:
//Given an array arr[] containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) 
whose sum equals a specified value target. You need to return the 1-based indices of the leftmost and rightmost elements of this subarray. 
You need to find the first subarray whose sum is equal to the target.

Note: If no such array is possible then, return [-1].

use sliding window technique(since only postive number are allowed)

//code:

vector<int> subarraySum(vector<int> &arr, int target) {
        // code here
        int start  =  0;
        int currSum = 0;
        for(int end = 0; end < arr.size(); end++){
            currSum += arr[end];
            
            while(currSum>target && start<end){
                currSum-=arr[start];
                start++;
            }
            
            if(currSum == target) return{start+1 , end+1};
        }
        
        return {-1};
    }
