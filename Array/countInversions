//uses merge sort , with small additon , whenever l[i] > r[j] increase the count;

class Solution {
  public:
    int inversionCount(vector<int> &arr) {
        // Code Here
        int left = 0;
        int right = arr.size()-1;
        int count = 0;
        mergeSort(arr,left,right,count);
        return count;
    }
    
    void mergeSort(vector<int> &arr, int left , int right,int &count){
        if(left>=right) return;
        
        int mid = left + (right - left)/2;
        
        mergeSort(arr,left , mid,count);
        mergeSort(arr,mid+1 , right,count);
        
        merge(arr,left,mid,right,count);
    }
    
    void merge(vector<int> &arr, int left, int mid , int right,int &count){
        int n1 = mid-left+1;
        int n2 = right - mid;
        
        vector<int> L(n1);
        vector<int> R(n2);
        
        for(int i =0;i<n1;i++){
            L[i] = arr[left + i];
        }
        
        for(int j=0;j<n2;j++){
            R[j] = arr[mid + 1 + j];
        }
        int i = 0;
        int j = 0;
        int k = left;
        
        while(i<n1 && j<n2){
            if(L[i] <= R[j]){
                arr[k] = L[i];
                i++;
            }else{
                arr[k] = R[j];
                j++;
                count += n1 -i;
            }
            k++;
        }
        
        while(i<n1){
            arr[k] = L[i];
            i++;
            k++;
        }
        
        while(j<n2){
            arr[k] = R[j];
            j++;
            k++;
        }
        
    }
};
